---
title: "webR/WebAssembly Demo"
engine: knitr
author: 'Jeffrey M. Perkel'
date: 'today'
format: 
  html: 
    self-contained: true 
webr: 
  packages: ['ggplot2', 'dplyr']
filters: 
  - webr
---

## webR and WebAssembly

This document demonstrates the [webR](https://docs.r-wasm.org/webr/latest/) package for the #rstats community. Using it, in conjunction with the [quarto-webr](https://quarto-webr.thecoatlessprofessor.com/) Quarto extension, users can create Quarto documents that allow readers to explore their code and data. 

In a traditional [executable manuscript](https://www.nature.com/articles/d41586-022-00563-z), results are calculated and figures generated when the document is compiled. This promotes accuracy and reproducibility, but the resulting document is static -- readers cannot, for instance, plug in different numbers to test a model's robustness.  

Using webR and quarto-webr, however, you can create web pages in which the code is executed on demand, in the web browser. Among other things, this allows researchers to create tools so others may explore their data. 

Key to these tools is [WebAssembly](https://webassembly.org/), a system for executing code written in such languages as C, C++ and Rust, in the browser. When a WebAssembly-enabled page is accessed, the code is downloaded and executed in a sandboxed virtual machine inside the browser itself -- no installation required. 

webR is a port of the R interpreter to WebAssembly, and quarto-webr is an extension to the Quarto system that allows users to embed webR code cells into their Quarto documents. Together, they allow us to create a document that allows users to modify and execute R code on demand. 

## Graphing a line 

We'll demonstrate these possibilities using the equation for a line, $$y = mx + b$$ By changing the values for slope (`m`) and y-intercept (`b`), we can see how the line changes. 

Click [here](https://github.com/jperkel/jperkel.github.io) for the GitHub repository that contains the code for this document. 

```{webr-r}
#| context: setup

# output the equation of a line
# this cell is hidden in the output document, but the code does run
get_equation <- function(m, b) {
  # get equation for new line
  
  xterm <- paste0(m, 'x')
  bterm <- abs(b)
  # op, as in operator
  op <- ifelse(b > 0, ' + ', 
               ifelse(b < 0, ' - ', ''))
  
  if (m == 0) { # y = b
    xterm <- ''
    op <- ''
    bterm <- b
  } else if (m == 1 | m == -1) { # y = x +/- b 
    xterm <- ifelse(m == 1, 'x', '-x')
    if (b == 0) { # y = x
      op <- ''
      bterm <- ''
    } 
  } else if (b == 0) { # y = mx
    bterm <- ''
    op <- ''
  }
  
  paste0("y = ", xterm, op, bterm)
}
```

1. Click the `Run Code` button to draw the line `y = x`. 
2. Adjust the values of `b` and `m` on lines 3 and 4 below to specify a new line. 
3. Click `Run Code` to see how the line changes.

```{webr-r}

#######################################################
##### ADJUST VALUES OF b AND m TO CHANGE THE LINE #####
b <- 0 # y-intercept
m <- 1 # slope
#######################################################

# data for the original line (y = x) 
original_line <- data.frame(x = -50:50, y = -50:50) 
# function for a line
new_line <- function(x) { (m * x) + b }

p <- ggplot(data.frame(x = -50:50), aes(x = x)) +
  geom_function(fun = new_line, colour = "red") +
  geom_line(data = original_line, aes(x = x, y = y), color = "black") +
  theme_minimal()

# get the y-axis limits so we can position annotations on the graph
# from https://stackoverflow.com/a/57427773
ymin <- ggplot_build(p)$layout$panel_params[[1]]$y.range[1]
ymax <- ggplot_build(p)$layout$panel_params[[1]]$y.range[2]

p <- p +
  annotate("text", label = "y = x", colour = "black", size = 4, 
           x = 37, y = ymax - (0.75 * (ymax - ymin))) +
  annotate("text", label = get_equation(m, b), colour = "red", size = 4, 
           x = 37, y = ymax - (0.8 * (ymax - ymin))) 
p
```

In the cell below, feel free to explore. For instance, you might give our plot a title by typing `p + labs(title = "Graph of a line")` and clicking `Run Code`.

```{webr}

```

